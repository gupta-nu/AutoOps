"""
Core state models for the AutoOps multi-agent system
"""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID, uuid4

from pydantic import BaseModel, Field


class TaskStatus(str, Enum):
    """Task execution status"""
    PENDING = "pending"
    PLANNING = "planning"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class AgentType(str, Enum):
    """Agent types in the system"""
    PLANNER = "planner"
    EXECUTOR = "executor"
    MONITOR = "monitor"


class KubernetesAction(str, Enum):
    """Kubernetes action types"""
    CREATE = "create"
    UPDATE = "update"
    DELETE = "delete"
    SCALE = "scale"
    PATCH = "patch"
    GET = "get"
    LIST = "list"


class ResourceType(str, Enum):
    """Kubernetes resource types"""
    POD = "pod"
    DEPLOYMENT = "deployment"
    SERVICE = "service"
    CONFIGMAP = "configmap"
    SECRET = "secret"
    INGRESS = "ingress"
    NAMESPACE = "namespace"
    NODE = "node"
    PVC = "persistentvolumeclaim"
    HPA = "horizontalpodautoscaler"


class AgentState(BaseModel):
    """State model for individual agents"""
    agent_id: UUID = Field(default_factory=uuid4)
    agent_type: AgentType
    status: TaskStatus = TaskStatus.PENDING
    current_task: Optional[str] = None
    last_action: Optional[str] = None
    last_updated: datetime = Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class KubernetesOperation(BaseModel):
    """Kubernetes operation definition"""
    action: KubernetesAction
    resource_type: ResourceType
    resource_name: Optional[str] = None
    namespace: str = "default"
    manifest: Optional[Dict[str, Any]] = None
    parameters: Dict[str, Any] = Field(default_factory=dict)


class ActionStep(BaseModel):
    """Individual action step in an execution plan"""
    step_id: str
    action: str
    resource_type: str
    resource_name: Optional[str] = None
    namespace: str = "default"
    manifest: Optional[Dict[str, Any]] = None
    parameters: Dict[str, Any] = Field(default_factory=dict)
    dependencies: List[str] = Field(default_factory=list)
    estimated_duration: Optional[int] = None  # seconds
    

class ExecutionPlan(BaseModel):
    """Execution plan generated by the Planner agent"""
    plan_id: UUID = Field(default_factory=uuid4)
    description: str
    operations: List[KubernetesOperation]
    dependencies: List[UUID] = Field(default_factory=list)
    estimated_duration: Optional[int] = None  # seconds
    created_at: datetime = Field(default_factory=datetime.utcnow)


class ExecutionResult(BaseModel):
    """Result of executing a Kubernetes operation"""
    operation_id: UUID = Field(default_factory=uuid4)
    operation: KubernetesOperation
    status: TaskStatus
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    started_at: datetime = Field(default_factory=datetime.utcnow)
    completed_at: Optional[datetime] = None
    duration: Optional[float] = None  # seconds


class AutoOpsState(BaseModel):
    """Global state for the AutoOps workflow"""
    request_id: UUID = Field(default_factory=uuid4)
    original_request: str
    current_step: str = "initialization"
    
    # Agent states
    planner_state: AgentState = Field(
        default_factory=lambda: AgentState(agent_type=AgentType.PLANNER)
    )
    executor_state: AgentState = Field(
        default_factory=lambda: AgentState(agent_type=AgentType.EXECUTOR)
    )
    
    # Workflow data
    execution_plan: Optional[ExecutionPlan] = None
    execution_results: List[ExecutionResult] = Field(default_factory=list)
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    # Error handling
    errors: List[str] = Field(default_factory=list)
    retry_count: int = 0
    
    def update_timestamp(self):
        """Update the last updated timestamp"""
        self.updated_at = datetime.utcnow()
    
    def add_error(self, error: str):
        """Add an error to the state"""
        self.errors.append(error)
        self.update_timestamp()
    
    def is_completed(self) -> bool:
        """Check if the workflow is completed"""
        return (
            self.planner_state.status == TaskStatus.COMPLETED
            and self.executor_state.status == TaskStatus.COMPLETED
        )
    
    def is_failed(self) -> bool:
        """Check if the workflow has failed"""
        return (
            self.planner_state.status == TaskStatus.FAILED
            or self.executor_state.status == TaskStatus.FAILED
        )
